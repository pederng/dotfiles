" =============================================================================
" Conform to XDG spec
" =============================================================================
set undodir=$XDG_DATA_HOME/vim/undo
set directory=$XDG_DATA_HOME/vim/swap
set backupdir=$XDG_DATA_HOME/vim/backup
set viewdir=$XDG_DATA_HOME/vim/view
set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after

" =============================================================================
" Load plugins
" =============================================================================

if empty(glob('$XDG_CONFIG_HOME/vim/autoload/plug.vim'))
  execute '!curl -fLo $XDG_CONFIG_HOME/vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('$XDG_CONFIG_HOME/vim/plugged')

  " General Utils
  Plug 'terryma/vim-smooth-scroll'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-speeddating'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-rsi'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'vim-scripts/ReplaceWithRegister'
  Plug 'christoomey/vim-system-copy'
  Plug 'christoomey/vim-tmux-navigator'
  Plug 'tmux-plugins/vim-tmux-focus-events'
  Plug 'tmux-plugins/vim-tmux'

  " Text objects
  Plug 'kana/vim-textobj-user'
  Plug 'kana/vim-textobj-indent'
  Plug 'kana/vim-textobj-line'
  Plug 'kana/vim-textobj-entire'
  Plug 'michaeljsmith/vim-indent-object'
  Plug 'bps/vim-textobj-python'

  " Tags
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'liuchengxu/vista.vim'

  " DB
  Plug 'tpope/vim-dadbod'

  " Syntax/linting/completion
  Plug 'w0rp/ale'
  Plug 'prabirshrestha/asyncomplete.vim'

  " Appearance
  Plug 'itchyny/lightline.vim'
  Plug 'mgee/lightline-bufferline'
  Plug 'maximbaz/lightline-ale'
  Plug 'daviesjamie/vim-base16-lightline'
  Plug 'pedernot/base16-vim'
  Plug 'ryanoasis/vim-devicons'

  " Search
  Plug 'voldikss/vim-floaterm'
  Plug 'liuchengxu/vim-clap', {'do': ':Clap install-binary'}

  " File system
  Plug 'tpope/vim-vinegar'

  " Git
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rhubarb'
  Plug 'mhinz/vim-signify'

  " Python
  Plug 'davidhalter/jedi-vim'

  " Other langs
  Plug 'sheerun/vim-polyglot'
  Plug 'martinda/Jenkinsfile-vim-syntax'
  Plug 'nathangrigg/vim-beancount'

  " Lisps
  Plug 'wlangstroth/vim-racket'
  Plug 'bhurlow/vim-parinfer'
  Plug 'sjl/tslime.vim'


call plug#end()

" =============================================================================
" Appearance
" =============================================================================


filetype plugin indent on
syntax enable

if filereadable(expand('$XDG_CONFIG_HOME/vim/vimrc_background'))
	let base16colorspace=256
	source $XDG_CONFIG_HOME/vim/vimrc_background
endif

set number
set relativenumber
set nocursorline
set showcmd
set textwidth=100
set nowrap


"Status line
set laststatus=2


set autoread
set shortmess+=I

" Updatetime
set updatetime=100

" =============================================================================
" Tabs
" =============================================================================

set tabstop=2
set shiftwidth=2
set expandtab
" set smartindent
set autoindent


" =============================================================================
" Leader
" =============================================================================

nnoremap <space> <Nop>
let mapleader = "\<space>"


" =============================================================================
" Search
" =============================================================================

set incsearch
set hlsearch
set ignorecase
set smartcase
set showmatch
nnoremap <leader>h :nohlsearch<CR><C-L>
autocmd InsertEnter * :setlocal nohlsearch
autocmd InsertLeave * :setlocal hlsearch

" =============================================================================
" Wildmode
" =============================================================================

set wildmenu
" Disable temp and backup files
set wildignore+=*.swp,*~,._*,*.pyc,__pycache__
" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" =============================================================================
" Editing
" =============================================================================

"disable autocomment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

"(auto)toggle rnu
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc
nnoremap <F2> :call NumberToggle()<cr>

"Run dot-command in normal if in visual
vnoremap . :norm.<CR>
inoremap jk <ESC>
noremap Q <NOP>
" Handy pasting from clipboard
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

set noswapfile
" set clipboard=unnamedplus

" :W or is to easy to type by accident
command W w

" =============================================================================
" Movement
" =============================================================================

"Force hjkl usage
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" =============================================================================
" Windows
" =============================================================================

set splitbelow splitright
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" =============================================================================
" Buffers
" =============================================================================

set hidden

let g:netrw_fastbrowse = 0

map <leader>bd :bp<CR>:bd #<CR>
map <leader>bD :set noconfirm <CR> :bufdo bd<CR> :set confirm<CR>

" =============================================================================
" Tags
" =============================================================================

map <f12> :! ctags -R .<cr>
set tags=./tags;/

" =============================================================================
" Clap
" =============================================================================

let g:clap_layout = {'relative': 'editor'}
nnoremap <C-p> :Clap<cr>
nnoremap <C-p><C-p> :Clap<cr>
nnoremap <C-p><C-t> :Clap proj_tags<cr>
nnoremap <C-p><C-o> :Clap tags<cr>
nnoremap <C-p><C-f> :Clap git_files<cr>
nnoremap <C-p><C-g> :Clap grep2<cr>
nnoremap <C-p><C-h> :Clap history<cr>
nnoremap <C-p><C-b> :Clap buffers<cr>

" =============================================================================
" Filetypes and syntax
" =============================================================================

" Always treat .tex as latex
let g:tex_flavour = 'latex'

" yaml colors
au BufNewFile,BufRead *.yaml,*.yml so ~/.config/vim/colors/yaml.vim

" =============================================================================
" Smooth scroll
" =============================================================================

noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 12, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 14, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 22, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 24, 4)<CR>

" =============================================================================
" Ale (async linting and completion)
" =============================================================================
function! BashLangServProjRoot(buffer)
	let l:git_path = ale#path#FindNearestDirectory(a:buffer, '.git')
	let l:curr_dir = fnamemodify(bufname(a:buffer), ':h')
	return !empty(l:git_path) ? fnamemodify(l:git_path, ':h:h') : l:curr_dir
endfunction

call ale#linter#Define('sh', {
\   'name': 'bashls',
\   'lsp': 'stdio',
\   'executable': function('ale_linters#sh#language_server#GetExecutable'),
\   'command': function('ale_linters#sh#language_server#GetCommand'),
\   'project_root': function('BashLangServProjRoot'),
\})

let g:ale_linters = {
      \ 'sh': ['bashls', 'shellcheck'],
      \ 'c': ['clang'],
      \ 'dart': ['dartanalyzer'],
      \ 'go': ['golint', 'gopls'],
      \ 'haskell': ['hie'],
      \ 'javascript': ['standard'],
      \ 'python': ['pylsp', 'mypy', 'pylint', 'bandit'],
      \ 'rust': ['analyzer', 'cargo'],
      \ 'typescript': ['tslint', 'tsserver'],
      \ 'vim': ['vint', 'vimls'],
      \}

let g:ale_fixers = {
      \ 'python': ['black'],
      \ 'haskell': ['brittany', 'stylish-haskell'],
      \ 'rust': ['rustfmt'],
      \ 'dart': [],
      \ 'go': ['gofmt'],
      \ 'javascript': ['prettier-standard'],
      \ 'typescript': ['tslint'],
      \ 'html': ['prettier'],
      \ 'css': ['prettier'],
      \}

let g:ale_completion_enabled = 0
let g:ale_fix_on_save = 1
let g:ale_python_black_options  = '-l 100'
let g:ale_python_bandit_options  = '-s B101'

let g:ale_rust_cargo_use_clippy = 1


let g:ale_hover_to_popup = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_sign_column_always = 1
let g:ale_type_map = {'flake8': {'ES': 'WS', 'E': 'W'}}

nmap d<c-]> :ALEGoToDefinition<CR>
nmap r<c-]> :ALEFindReferences<CR>
nmap gd :ALEGoToDefinition<CR>
nmap gR :ALEFindReferences<CR>
nmap <leader>gR :ALERename<CR>
nmap <c-y> :ALEHover<CR>

let g:asyncomplete_remove_duplicates = 1
let g:asyncomplete_smart_completion = 1
let g:asyncomplete_auto_popup = 1
imap <c-l> <Plug>(asyncomplete_force_refresh)

function! s:check_back_space() abort
 let col = col('.') - 1
 return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ asyncomplete#force_refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ale#get_source_options({ 'priority': 10  }))

" =============================================================================
" VCS signs
" =============================================================================

set signcolumn=yes

" =============================================================================
" Python
" =============================================================================

let g:jedi#goto_command = ''
let g:jedi#goto_assignments_command = ''
let g:jedi#goto_definitions_command = ''
let g:jedi#documentation_command = ''
let g:jedi#usages_command = ''
let g:jedi#rename_command = '<leader>gr'
let g:jedi#completions_enabled = 0

" =============================================================================
" Tslime (lisps)
" =============================================================================

" let g:tslime_normal_mapping = '<leader>t'
" let g:tslime_visual_mapping = '<leader>t'
" let g:tslime_vars_mapping = '<leader>T'

" =============================================================================
" Bufferline
" =============================================================================

let g:bufferline_echo = 1
let g:bufferline_show_bufnr = 0
let g:lightline#bufferline#enable_devicons = 1
autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()

" =============================================================================
" Git
" =============================================================================

autocmd Filetype gitcommit setlocal spell textwidth=72

" =============================================================================
" Fugitive
" =============================================================================

augroup FugitiveCustom
  autocmd BufRead fugitive://* set bufhidden=delete
augroup END

" :Gbrowse uses netrw, set default browser for that
let g:netrw_browsex_viewer = "qutebrowser"


" =============================================================================
" Lightline
" =============================================================================

let g:lightline = {
  \ 'colorscheme': 'base16',
  \ 'active': {
  \   'left': [ ['mode', 'paste'], ['readonly', 'filename', 'modified', 'fugitive']],
  \   'right': [['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ],
  \             ['percent'],
  \             ['fileformat', 'fileencoding', 'filetype']]
  \ },
  \ 'component_function': {
  \   'fugitive': 'FugitiveHead',
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' },
  \ 'tabline': {'left': [['buffers']], 'right': []}
  \ }


set showtabline=2
let g:lightline.component_expand = {
  \ 'buffers': 'lightline#bufferline#buffers',
  \  'linter_checking': 'lightline#ale#checking',
  \  'linter_warnings': 'lightline#ale#warnings',
  \  'linter_errors': 'lightline#ale#errors',
  \  'linter_ok': 'lightline#ale#ok',
  \}

let g:lightline.component_type = {
  \ 'buffers': 'tabsel',
  \ 'linter_checking': 'left',
  \ 'linter_warnings': 'warning',
  \ 'linter_errors': 'error',
  \ 'linter_ok': 'left',
  \ }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler' && &readonly ? '' : ''
endfunction

" =============================================================================
" Vista
" =============================================================================

let g:vista#renderer#enable_icon = 1
let g:vista_default_executive = 'ctags'
let g:vista_executive_for = {
  \ 'python': 'ale',
  \ 'rust': 'ale',
  \ }

" =============================================================================
" Markdown
" =============================================================================

let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_math = 1
let g:vim_markdown_new_list_item_indent = 0
autocmd FileType markdown setlocal spell formatoptions=tqr

" =============================================================================
" DB
" =============================================================================

command SQL enew | setlocal buftype=nofile | setlocal ft=pgsql

" =============================================================================
" Floaterm
" =============================================================================

nnoremap <silent> <leader>t :FloatermToggle<CR>
tnoremap <silent> <leader>t <C-\><C-n>:FloatermToggle<CR>

" =============================================================================
" Machine specific config
" =============================================================================

if filereadable(expand('$XDG_CONFIG_HOME/vim/machine_specific_vimrc'))
	source $XDG_CONFIG_HOME/vim/machine_specific_vimrc
endif
