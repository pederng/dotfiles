" =============================================================================
" Load plugins
" =============================================================================
if empty(glob('~/.vim/autoload/plug.vim'))
  execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/plugged')

  " General Utils
  Plug 'terryma/vim-smooth-scroll'
  Plug 'terryma/vim-expand-region'
  Plug 'tpope/vim-commentary'
  Plug 'ivyl/vim-bling'
  Plug 'tmhedberg/matchit'
  Plug 'marcweber/vim-addon-mw-utils'
  Plug 'chrisbra/unicode.vim'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-speeddating'
  Plug 'kana/vim-textobj-user'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'tpope/vim-surround'
  Plug 'jonhiggs/vim-readline'

  Plug 'prabirshrestha/async.vim'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  Plug 'Shougo/vimproc.vim', {'do' : 'make'}

  " Tags
  Plug 'ludovicchabant/vim-gutentags'

  " Syntax/linting
  Plug 'w0rp/ale'

  " Appearance
  Plug 'itchyny/lightline.vim'
  Plug 'mgee/lightline-bufferline'
  Plug 'maximbaz/lightline-ale'
  Plug 'daviesjamie/vim-base16-lightline'
  Plug 'chriskempson/base16-vim' , {'commit': 'e5f2e53'}

  " Search
  Plug 'junegunn/fzf.vim'

  " File system
  Plug 'tpope/vim-vinegar'

  " Git
  Plug 'tpope/vim-fugitive'
  Plug 'airblade/vim-gitgutter'

  " Python
  Plug 'davidhalter/jedi-vim'
  Plug 'bps/vim-textobj-python'
  Plug 'hynek/vim-python-pep8-indent'

  " Rust
  Plug 'rust-lang/rust.vim'

  " Other langs
  Plug 'cespare/vim-toml'
  Plug 'chase/vim-ansible-yaml'
  Plug 'plasticboy/vim-markdown'
  Plug 'shmup/vim-sql-syntax'
  Plug 'martinda/Jenkinsfile-vim-syntax'
  Plug 'zah/nim.vim'
  Plug 'ElmCast/elm-vim'
  Plug 'purescript-contrib/purescript-vim'
  Plug 'jkotlinski/forth.vim'
  Plug 'sheerun/vim-polyglot'

  " Dart
  Plug 'dart-lang/dart-vim-plugin'
  " Plug 'thosake/vim-flutter'

  " Haskell
  Plug 'neovimhaskell/haskell-vim'
  Plug 'eagletmt/ghcmod-vim'
  Plug 'eagletmt/neco-ghc'

  " Clojure/other lisps
  Plug 'tpope/vim-fireplace'
  Plug 'tpope/vim-salve'
  Plug 'guns/vim-sexp'
  Plug 'tpope/vim-sexp-mappings-for-regular-people'
  Plug 'guns/vim-clojure-static'
  Plug 'guns/vim-clojure-highlight'
  " Plug 'kien/rainbow_parentheses.vim'
  Plug 'wlangstroth/vim-racket'
  Plug 'bhurlow/vim-parinfer'
  Plug 'MicahElliott/vrod'
  Plug 'sjl/tslime.vim'


call plug#end()

" =============================================================================
" Appearance
" =============================================================================


filetype plugin indent on
syntax enable

if filereadable(expand('~/.vimrc_background'))
	let base16colorspace=256
	source ~/.vimrc_background
endif

set number
set relativenumber
set nocursorline
set showcmd
set textwidth=100


"Status line
set laststatus=2


set autoread
set shortmess+=I

" Updatetime
set updatetime=2000

" =============================================================================
" Tabs
" =============================================================================

set tabstop=2
set shiftwidth=2
set expandtab
" set smartindent
set autoindent

" =============================================================================
" Search
" =============================================================================

set incsearch
set ignorecase
set smartcase
set showmatch

" =============================================================================
" Wildmode
" =============================================================================

set wildmenu
" Disable temp and backup files
set wildignore+=*.swp,*~,._*,*.pyc,__pycache__
" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" =============================================================================
" Editing
" =============================================================================

"disable autocomment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

"(auto)toggle rnu
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc
nnoremap <F2> :call NumberToggle()<cr>

"Run dot-command in normal if in visual
vnoremap . :norm.<CR>
inoremap jk <ESC>

"Remap leader to space
nnoremap <space> <Nop>
let mapleader = "\<space>"

noremap Q <NOP>
" Handy pasting from clipboard
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

set noswapfile
" set clipboard=unnamedplus

" =============================================================================
" Movement
" =============================================================================

"Force hjkl usage
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" =============================================================================
" File managment
" =============================================================================
nnoremap <Leader>w :w<CR>
nnoremap <Leader>W :wa<CR>
nnoremap <Leader>x :x<CR>
nnoremap <Leader>X :xa<CR>
nnoremap <Leader>e :e<CR>
nnoremap <Leader>E :ea<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :qa<CR>

" =============================================================================
" Windows
" =============================================================================

set splitbelow splitright
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" =============================================================================
" Buffers
" =============================================================================
set nohidden

augroup netrw_buf_hidden_fix
  autocmd!
  " Set all non-netrw buffers to bufhidden=hide
  autocmd BufWinEnter *
              \  if &ft != 'netrw'
              \|     set bufhidden=hide
              \| endif

augroup end

map <leader>bd :bp<CR>:bd #<CR>
map <leader>bD :set noconfirm <CR> :bufdo bd<CR> :set confirm<CR>

" =============================================================================
" Spell checking
" =============================================================================

nnoremap <leader>ss :set spell!<CR>
nnoremap <leader>sf 1z=
nnoremap <leader>sg zg
nnoremap <leader>sn ]s

" =============================================================================
" Tags
" =============================================================================

map <f12> :! ctags -R .<cr>
set tags=./tags;/

" =============================================================================
" fzf
" =============================================================================
set rtp+=~/.fzf

nnoremap <leader>ff :Files<cr>
nnoremap <leader>fa :GFiles<cr>
nnoremap <leader>fb :Buffer<cr>
nnoremap <leader>fo :BTags<cr>
nnoremap <leader>ft :Tags<cr>
nnoremap <leader>fh :History<cr>
nnoremap <leader>fm :Marks<cr>
nnoremap <leader>fc :BCommits<cr>
nnoremap <leader>fC :Commits<cr>
nnoremap <leader>fg :Rg<cr>
let g:rg_command = '
  \ rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always"
  \ -g "*.{js,php,md,styl,jade,html,config,py,cpp,c,go,hs,rb,conf}"
  \ -g "!{.git,.toxenv,node_modules,vendor,.pybuild,debian,htmlcov,htdocs,.tox,.mypy_cache,.ropeproject}/*" '

command! -bang -nargs=* Rg call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1, <bang>0)

" =============================================================================
" Filetypes and syntax
" =============================================================================

" Always treat .tex as latex
let g:tex_flavour = 'latex'

" yaml colors
au BufNewFile,BufRead *.yaml,*.yml so ~/.vim/colors/yaml.vim

" =============================================================================
" Smooth scroll
" =============================================================================

noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 12, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 14, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 22, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 24, 4)<CR>

" =============================================================================
" Ale (async linting)
" =============================================================================

let g:ale_linters = {
      \ 'python': ['pylint', 'mypy'],
      \ 'javascript': ['standard'],
      \ 'go': ['golint'],
      \ 'typescript': ['tslint', 'tsserver'],
      \ 'haskell': ['hie', 'ghc-mod'],
      \ 'vim': ['vint'],
      \ 'rust': ['rls', 'cargo'],
      \ 'c': ['clang'],
      \ 'dart': ['dartanalyzer'],
      \}

let g:ale_fixers = {
      \ 'python': ['black'],
      \ 'haskell': ['brittany'],
      \ 'rust': ['rustfmt'],
      \ 'dart': [],
      \ 'go': ['gofmt'],
      \ 'javascript': ['prettier-standard'],
      \ 'typescript': ['tslint'],
      \ 'html': ['prettier'],
      \ 'css': ['prettier'],
      \}

let g:ale_completion_enabled = 0

let g:ale_fix_on_save = 1
let g:ale_python_black_options  = '-l 100'
let g:ale_haskell_brittany_options  = '-columns 100'

let g:ale_rust_cargo_use_clippy = 1

nmap <silent> <leader>lk <Plug>(ale_previous_wrap)
nmap <silent> <leader>lj <Plug>(ale_next_wrap)
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_sign_column_always = 1
let g:ale_type_map = {'flake8': {'ES': 'WS', 'E': 'W'}}

" =============================================================================
" Autocomplete
" =============================================================================

let g:asyncomplete_remove_duplicates = 1

let g:asyncomplete_smart_completion = 1
let g:asyncomplete_auto_popup = 1

if executable('pyls')
au User lsp_setup call lsp#register_server({
		\ 'name': 'pyls',
		\ 'cmd': {server_info->['pyls']},
		\ 'whitelist': ['python'],
		\ })
endif

if executable('rls')
		au User lsp_setup call lsp#register_server({
				\ 'name': 'rls',
				\ 'cmd': {server_info->['rustup', 'run', 'nightly', 'rls']},
        \ 'workspace_config': {'rust': {'clippy_preference': 'on'}},
				\ 'whitelist': ['rust'],
				\ })
endif

if executable('hie')
au User lsp_setup call lsp#register_server({
		\ 'name': 'hie',
		\ 'cmd': {server_info->['hie-wrapper', '--lsp']},
		\ 'whitelist': ['haskell'],
		\ })
endif

if executable('clangd')
au User lsp_setup call lsp#register_server({
		\ 'name': 'clangd',
		\ 'cmd': {server_info->['clangd']},
		\ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
		\ })
endif

if executable('dart_language_server')
au User lsp_setup call lsp#register_server({
		\ 'name': 'dart_language_server',
		\ 'cmd': {server_info->['dart_language_server']},
		\ 'whitelist': ['dart'],
		\ })
endif

if executable('gopls')
au User lsp_setup call lsp#register_server({
		\ 'name': 'gopls',
		\ 'cmd': {server_info->['gopls', '-mode', 'stdio']},
		\ 'whitelist': ['go'],
		\ })
endif

if executable('typescript-language-server')
au User lsp_setup call lsp#register_server({
		\ 'name': 'typescript-language-server',
		\ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
		\ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
		\ 'whitelist': ['typescript', 'typescript.tsx'],
		\ })
endif

imap <c-l> <Plug>(asyncomplete_force_refresh)
nmap <leader>gd :LspDefinition<CR>
nmap <leader>gk :LspHover<CR>

function! s:check_back_space() abort
 let col = col('.') - 1
 return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <silent><expr> <TAB>
\ pumvisible() ? "\<C-n>" :
\ <SID>check_back_space() ? "\<TAB>" :
\ asyncomplete#force_refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"

let g:lsp_diagnostics_enabled = 0

" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('~/.vim/vim-lsp.log')
" let g:asyncomplete_log_file = expand('~/.vim/asyncomplete.log')

" =============================================================================
" GitGutter
" =============================================================================

set signcolumn=yes

" =============================================================================
" Python
" =============================================================================

let g:jedi#goto_command = ''
let g:jedi#goto_assignments_command = ''
let g:jedi#goto_definitions_command = ''
let g:jedi#documentation_command = '<leader>gK'
let g:jedi#usages_command = ''
let g:jedi#rename_command = '<leader>gr'
let g:jedi#completions_enabled = 0

" =============================================================================
" Clojure
" =============================================================================

let g:sexp_enable_insert_mode_mappings = 0

" =============================================================================
" Racket
" =============================================================================

let g:tslime_normal_mapping = '<leader>t'
let g:tslime_visual_mapping = '<leader>t'
let g:tslime_vars_mapping = '<leader>T'

" =============================================================================
" Haskell
" =============================================================================

augroup haskell
  au FileType haskell nmap <leader>gt :GhcModType<CR>
  au FileType haskell nmap <leader>gc :GhcModTypeClear<CR>
  au FileType haskell nmap <leader>gi :GhcModInfoPreview<CR>
augroup end

let g:haskell_tabular = 1
vmap a= :Tabularize /=<CR>
vmap a; :Tabularize /::<CR>
vmap a- :Tabularize /-><CR>

" =============================================================================
" expand-region
" =============================================================================

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" =============================================================================
" Bufferline
" =============================================================================

let g:bufferline_echo = 1
let g:bufferline_show_bufnr = 0
let g:lightline#bufferline#enable_devicons = 1
let g:lightline#bufferline#unicode_symbols = 1
autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()

" =============================================================================
" Git
" =============================================================================

autocmd Filetype gitcommit setlocal spell textwidth=72

" =============================================================================
" Fugitive
" =============================================================================

map <leader>gs :Gstatus<CR><C-w>20+

" =============================================================================
" Lightline
" =============================================================================

let g:lightline = {
  \ 'colorscheme': 'base16',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ], ['filename', 'fugitive']],
  \   'right': [['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok', 'lineinfo' ],
  \             ['percent'],
  \             ['fileformat', 'fileencoding', 'filetype']]
  \ },
  \ 'component_function': {
  \   'fugitive': 'LightLineFugitive',
  \   'filename': 'LightLineFilename',
  \ },
  \ 'separator': { 'left': '', 'right': '' },
  \ 'subseparator': { 'left': '', 'right': '' },
  \ 'tabline': {'left': [['buffers']], 'right': []}
  \ }


set showtabline=2
let g:lightline.component_expand = {
  \ 'buffers': 'lightline#bufferline#buffers',
  \  'linter_checking': 'lightline#ale#checking',
  \  'linter_warnings': 'lightline#ale#warnings',
  \  'linter_errors': 'lightline#ale#errors',
  \  'linter_ok': 'lightline#ale#ok',
  \}

let g:lightline.component_type = {
  \ 'buffers': 'tabsel',
  \ 'linter_checking': 'left',
  \ 'linter_warnings': 'warning',
  \ 'linter_errors': 'error',
  \ 'linter_ok': 'left',
  \ }

function! LightLineModified()
  return &ft =~ 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help\|vimfiler' && &readonly ? '' : ''
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
  \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
  \  &ft == 'unite' ? unite#get_status_string() :
  \  &ft == 'vimshell' ? vimshell#get_status_string() :
  \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
  \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  if &ft !~? 'vimfiler' && exists('*fugitive#head')
    let branch = fugitive#head()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

" =============================================================================
" Markdown
" =============================================================================

let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_math = 1
let g:vim_markdown_new_list_indent = 2
autocmd FileType markdown setlocal formatoptions=tqr

" =============================================================================
" Machine specific config
" =============================================================================

if filereadable(expand('~/.vim/machine_specific_vimrc'))
	source ~/.vim/machine_specific_vimrc
endif
