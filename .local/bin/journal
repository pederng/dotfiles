#!/usr/bin/env python
import sys
from itertools import chain
from pprint import pprint
from typing import Dict, List, Iterator
from pathlib import Path
from datetime import datetime
from dataclasses import dataclass, field, asdict
import subprocess

FMT = "%A %B %d %Y"
BRK = "\n"
HEADER = "#"
TASK = "* TASK: "
DONE = "(DONE)"
CANCELLED = "(CANCELLED)"
JOURNAL = Path("/home/peder/.notes/journal.md")

COMMANDS = ["tasks", "sync", "completion"]
COMPLETION = f"""
__journal_completions()
{{
    COMPREPLY=( $(compgen -W "{' '.join(COMMANDS)}" "${{COMP_KEY}}") )
}}
complete -F __journal_completions journal
"""


def is_task(line: str) -> bool:
    return line.startswith(TASK)


def is_closed(line: str) -> bool:
    if not is_task(line):
        return False
    return line.endswith(DONE) or line.endswith(CANCELLED)


def is_open_task(line: str) -> bool:
    return is_task(line) and not is_closed(line)


def is_closed_task(line: str) -> bool:
    return is_task(line) and is_closed(line)


def strip_task(line: str) -> str:
    if not is_task(line):
        return line
    _, _, line = line.partition(TASK)
    line, _, _ = line.partition(DONE)
    line, _, _ = line.partition(CANCELLED)
    return line.strip()


@dataclass
class Entry:
    loc: int
    date: datetime
    content: List[str] = field(default_factory=list)

    def __iter__(self) -> Iterator[str]:
        return iter(self.content)

    def has_task(self, line: str) -> bool:
        return strip_task(line) in [strip_task(l) for l in self.content]

    def _filter_iter(self, pred) -> Iterator[str]:
        for line in self:
            if pred(line):
                yield line

    @property
    def open_tasks(self) -> Iterator[str]:
        return self._filter_iter(is_open_task)

    @property
    def closed_tasks(self) -> Iterator[str]:
        return self._filter_iter(is_closed_task)


Entries = Dict[str, Entry]


def add_latest_header() -> None:
    header = f"{HEADER} {datetime.now().strftime(FMT)}"
    if JOURNAL.exists():
        content = JOURNAL.read_text()
        if header in content:
            return
        header = f"{BRK if content else ''}{header}{BRK}{BRK}"
    with JOURNAL.open("a" if JOURNAL.exists() else "w") as f:
        f.write(header)


def edit() -> None:
    subprocess.run([f"vim", "+$", f"{JOURNAL}"])


def write(entries: Entries) -> None:
    with JOURNAL.open("w") as f:
        for line in chain(*entries.values()):
            f.write(line + BRK)


def remove_final_newline(entries: Entries) -> Entries:
    last_entry = list(entries.values())[-1]
    if not last_entry.content[-1]:
        last_entry.content = last_entry.content[:-1]
    return entries


def get_entries() -> Entries:
    entries: Entries = {}
    for line_no, line in enumerate(JOURNAL.read_text().split("\n")):
        if line.startswith(HEADER):
            _, _, date_str = line.partition(" ")
            entries[date_str] = Entry(line_no, datetime.strptime(date_str, FMT))
        entries[date_str].content.append(line)
    return remove_final_newline(entries)


def bump_tasks(entries: Entries) -> Entries:
    if len(entries) == 1:
        return entries
    previous, current = list(entries.values())[-2:]
    for task in previous.open_tasks:
        if not current.has_task(task):
            current.content.append(task)
    return entries


def list_tasks() -> None:
    for task in set(chain(*(e.open_tasks for e in get_entries().values()))):
        print(task)


def default() -> None:
    add_latest_header()
    write(bump_tasks(get_entries()))
    edit()


if __name__ == "__main__":
    if len(sys.argv) == 1:
        default()
        sys.exit(0)
    cmd = sys.argv[1]
    if cmd not in COMMANDS:
        raise RuntimeError(f"Unknown command {cmd}")
    if cmd == "tasks":
        list_tasks()
    elif cmd == "sync":
        subprocess.run(["notes", "sync"])
    elif cmd == "completion":
        print(COMPLETION)
